import React, { useState, useEffect } from 'react';
import { Upload, FileText, AlertCircle, CheckCircle, TrendingUp, TrendingDown, Activity, Droplet, Zap, Trash2, Leaf, BarChart3, PieChart, Download, RefreshCw } from 'lucide-react';
import { Amplify } from 'aws-amplify';
import { uploadData } from 'aws-amplify/storage';
import awsExports from './aws-exports'; // generated by Amplify CLI
Amplify.configure(awsExports);

const EcoPilotDashboard = () => {
  const [activeTab, setActiveTab] = useState('upload');
  const [uploadedFiles, setUploadedFiles] = useState([]);
  const [selectedFile, setSelectedFile] = useState(null);
  const [uploading, setUploading] = useState(false);
  const [dragActive, setDragActive] = useState(false);
  const [assessments, setAssessments] = useState([]);
  const [selectedAssessment, setSelectedAssessment] = useState(null);
  const [loading, setLoading] = useState(false);

  // Simulated API calls - Replace with actual AWS Amplify API calls
  const uploadFileToS3 = async (file) => {
    // TODO: Replace with actual S3 upload via Amplify Storage
    const uploadFileToS3 = async (file) => {
    try {
        const result = await uploadData({
        path: `raw-data/${file.name}`, // S3 key
        data: file,
        options: {
            onProgress: (progress) => {
            console.log(`Upload progress: ${progress.transferredBytes} bytes`);
            }
        }
        }).result;

        console.log('Upload succeeded:', result);
        return {
        fileId: `${file.name}_${new Date().toISOString()}`,
        bucket: result.bucket,
        key: result.key,
        status: 'uploaded'
        };
    } catch (error) {
        console.error('Upload failed:', error);
        throw error;
    }
    };

  };

  const fetchAssessments = async () => {
    // TODO: Replace with actual DynamoDB query via Amplify API
    setLoading(true);
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Mock data
    const mockAssessments = [
      {
        assessment_id: 'factory_data_001',
        file_id: 'factory_emissions.csv_2024-10-18',
        timestamp: '2024-10-18T19:30:00Z',
        overall_status: 'non_compliant',
        compliance_score: 68,
        data_quality_score: 85,
        total_violations: 4,
        critical_violations: 1,
        source_file: 'factory_emissions.csv',
        assessment_data: {
          violations: [
            {
              category: 'carbon_emissions',
              severity: 'critical',
              gap_description: 'Carbon emissions exceed threshold by 34%',
              actual_value: 6700,
              threshold_value: 5000,
              deviation_percentage: 34,
              standard: 'GHG Protocol Scope 1+2',
              recommendation: 'Implement renewable energy sourcing and energy efficiency measures',
              timeline: '90_days',
              regulation_reference: 'EU CSRD E1-1'
            },
            {
              category: 'waste_management',
              severity: 'medium',
              gap_description: 'Waste diversion rate below minimum',
              actual_value: 0.68,
              threshold_value: 0.75,
              deviation_percentage: 9.3,
              standard: 'ISO 14001',
              recommendation: 'Enhance recycling program and waste sorting',
              timeline: '30_days'
            }
          ],
          missing_metrics: ['water_usage', 'renewable_energy_percentage'],
          strengths: ['Energy monitoring system in place', 'Regular emissions reporting'],
          next_steps: [
            'Conduct energy audit to identify efficiency improvements',
            'Implement waste sorting training program',
            'Install water monitoring systems'
          ]
        }
      },
      {
        assessment_id: 'office_data_002',
        file_id: 'office_sustainability.csv_2024-10-17',
        timestamp: '2024-10-17T14:20:00Z',
        overall_status: 'at_risk',
        compliance_score: 78,
        data_quality_score: 92,
        total_violations: 2,
        critical_violations: 0,
        source_file: 'office_sustainability.csv',
        assessment_data: {
          violations: [
            {
              category: 'energy_efficiency',
              severity: 'medium',
              gap_description: 'Renewable energy percentage below target',
              actual_value: 0.25,
              threshold_value: 0.30,
              deviation_percentage: 16.7,
              standard: 'ISO 50001',
              recommendation: 'Increase renewable energy procurement',
              timeline: '90_days'
            }
          ],
          missing_metrics: ['biodiversity_impact'],
          strengths: ['Excellent water conservation', 'Strong waste diversion rate at 82%'],
          next_steps: ['Negotiate renewable energy contracts', 'Continue water efficiency programs']
        }
      }
    ];
    
    setAssessments(mockAssessments);
    setLoading(false);
  };

  useEffect(() => {
    if (activeTab === 'dashboard') {
      fetchAssessments();
    }
  }, [activeTab]);

  const handleDrag = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      handleFiles(e.dataTransfer.files);
    }
  };

  const handleFileInput = (e) => {
    if (e.target.files && e.target.files[0]) {
      handleFiles(e.target.files);
    }
  };

  const handleFiles = async (files) => {
    const file = files[0];
    setSelectedFile(file);
    setUploading(true);

    try {
      const result = await uploadFileToS3(file);
      setUploadedFiles([...uploadedFiles, {
        name: file.name,
        size: file.size,
        type: file.type,
        uploadTime: new Date().toISOString(),
        fileId: result.fileId,
        status: 'processing'
      }]);
      setUploading(false);
      alert('File uploaded successfully! Processing will begin shortly.');
    } catch (error) {
      console.error('Upload error:', error);
      setUploading(false);
      alert('Upload failed. Please try again.');
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'compliant': return 'text-green-600 bg-green-50';
      case 'at_risk': return 'text-yellow-600 bg-yellow-50';
      case 'non_compliant': return 'text-red-600 bg-red-50';
      default: return 'text-gray-600 bg-gray-50';
    }
  };

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'critical': return 'text-red-600 bg-red-100';
      case 'high': return 'text-orange-600 bg-orange-100';
      case 'medium': return 'text-yellow-600 bg-yellow-100';
      case 'low': return 'text-blue-600 bg-blue-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleString();
  };

  const formatFileSize = (bytes) => {
    if (bytes < 1024) return bytes + ' B';
    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';
    return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 via-blue-50 to-purple-50">
      {/* Header */}
      <header className="bg-white border-b border-gray-200 shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <Leaf className="w-8 h-8 text-green-600" />
              <div>
                <h1 className="text-2xl font-bold text-gray-900">EcoPilot</h1>
                <p className="text-sm text-gray-500">AI-Powered ESG Compliance Platform</p>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <button
                onClick={() => setActiveTab('upload')}
                className={`px-4 py-2 rounded-lg font-medium transition-all ${
                  activeTab === 'upload'
                    ? 'bg-green-600 text-white shadow-md'
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}
              >
                <Upload className="w-4 h-4 inline mr-2" />
                Upload
              </button>
              <button
                onClick={() => setActiveTab('dashboard')}
                className={`px-4 py-2 rounded-lg font-medium transition-all ${
                  activeTab === 'dashboard'
                    ? 'bg-green-600 text-white shadow-md'
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}
              >
                <BarChart3 className="w-4 h-4 inline mr-2" />
                Dashboard
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {activeTab === 'upload' && (
          <div className="space-y-6">
            {/* Upload Section */}
            <div className="bg-white rounded-xl shadow-lg p-8">
              <h2 className="text-2xl font-bold text-gray-900 mb-6">Upload ESG Data</h2>
              
              <div
                className={`border-2 border-dashed rounded-xl p-12 text-center transition-all ${
                  dragActive
                    ? 'border-green-500 bg-green-50'
                    : 'border-gray-300 hover:border-green-400 hover:bg-gray-50'
                }`}
                onDragEnter={handleDrag}
                onDragLeave={handleDrag}
                onDragOver={handleDrag}
                onDrop={handleDrop}
              >
                <Upload className="w-16 h-16 text-gray-400 mx-auto mb-4" />
                <p className="text-xl font-medium text-gray-700 mb-2">
                  Drag and drop your file here
                </p>
                <p className="text-sm text-gray-500 mb-6">
                  Supported formats: CSV, JSON, PDF
                </p>
                <label className="inline-flex items-center px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 cursor-pointer transition-all shadow-md hover:shadow-lg">
                  <FileText className="w-5 h-5 mr-2" />
                  Choose File
                  <input
                    type="file"
                    className="hidden"
                    onChange={handleFileInput}
                    accept=".csv,.json,.pdf"
                  />
                </label>
              </div>

              {uploading && (
                <div className="mt-6 p-4 bg-blue-50 rounded-lg">
                  <div className="flex items-center space-x-3">
                    <RefreshCw className="w-5 h-5 text-blue-600 animate-spin" />
                    <span className="text-blue-800 font-medium">Uploading and processing...</span>
                  </div>
                </div>
              )}

              {/* Recent Uploads */}
              {uploadedFiles.length > 0 && (
                <div className="mt-8">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Recent Uploads</h3>
                  <div className="space-y-3">
                    {uploadedFiles.map((file, idx) => (
                      <div key={idx} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg border border-gray-200">
                        <div className="flex items-center space-x-3">
                          <FileText className="w-5 h-5 text-gray-500" />
                          <div>
                            <p className="font-medium text-gray-900">{file.name}</p>
                            <p className="text-sm text-gray-500">
                              {formatFileSize(file.size)} • {formatDate(file.uploadTime)}
                            </p>
                          </div>
                        </div>
                        <span className="px-3 py-1 bg-blue-100 text-blue-700 text-sm rounded-full font-medium">
                          {file.status}
                        </span>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        {activeTab === 'dashboard' && (
          <div className="space-y-6">
            {/* Stats Overview */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
              <div className="bg-white rounded-xl shadow-md p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-500 mb-1">Total Assessments</p>
                    <p className="text-3xl font-bold text-gray-900">{assessments.length}</p>
                  </div>
                  <BarChart3 className="w-10 h-10 text-blue-500" />
                </div>
              </div>

              <div className="bg-white rounded-xl shadow-md p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-500 mb-1">Avg Compliance Score</p>
                    <p className="text-3xl font-bold text-gray-900">
                      {assessments.length > 0
                        ? Math.round(assessments.reduce((sum, a) => sum + a.compliance_score, 0) / assessments.length)
                        : 0}
                    </p>
                  </div>
                  <TrendingUp className="w-10 h-10 text-green-500" />
                </div>
              </div>

              <div className="bg-white rounded-xl shadow-md p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-500 mb-1">Critical Violations</p>
                    <p className="text-3xl font-bold text-red-600">
                      {assessments.reduce((sum, a) => sum + a.critical_violations, 0)}
                    </p>
                  </div>
                  <AlertCircle className="w-10 h-10 text-red-500" />
                </div>
              </div>

              <div className="bg-white rounded-xl shadow-md p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-500 mb-1">Data Quality</p>
                    <p className="text-3xl font-bold text-gray-900">
                      {assessments.length > 0
                        ? Math.round(assessments.reduce((sum, a) => sum + a.data_quality_score, 0) / assessments.length)
                        : 0}%
                    </p>
                  </div>
                  <Activity className="w-10 h-10 text-purple-500" />
                </div>
              </div>
            </div>

            {/* Assessments List */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-bold text-gray-900">Compliance Assessments</h2>
                <button
                  onClick={fetchAssessments}
                  className="px-4 py-2 bg-gray-100 hover:bg-gray-200 rounded-lg transition-all flex items-center space-x-2"
                >
                  <RefreshCw className="w-4 h-4" />
                  <span>Refresh</span>
                </button>
              </div>

              {loading ? (
                <div className="text-center py-12">
                  <RefreshCw className="w-8 h-8 text-gray-400 animate-spin mx-auto mb-4" />
                  <p className="text-gray-500">Loading assessments...</p>
                </div>
              ) : assessments.length === 0 ? (
                <div className="text-center py-12">
                  <FileText className="w-16 h-16 text-gray-300 mx-auto mb-4" />
                  <p className="text-gray-500">No assessments yet. Upload a file to get started.</p>
                </div>
              ) : (
                <div className="space-y-4">
                  {assessments.map((assessment) => (
                    <div
                      key={assessment.assessment_id}
                      className="border border-gray-200 rounded-lg p-6 hover:shadow-md transition-all cursor-pointer"
                      onClick={() => setSelectedAssessment(assessment)}
                    >
                      <div className="flex items-start justify-between mb-4">
                        <div>
                          <h3 className="text-lg font-semibold text-gray-900 mb-1">
                            {assessment.source_file}
                          </h3>
                          <p className="text-sm text-gray-500">{formatDate(assessment.timestamp)}</p>
                        </div>
                        <span className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(assessment.overall_status)}`}>
                          {assessment.overall_status.replace('_', ' ').toUpperCase()}
                        </span>
                      </div>

                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                        <div>
                          <p className="text-xs text-gray-500 mb-1">Compliance Score</p>
                          <p className="text-2xl font-bold text-gray-900">{assessment.compliance_score}%</p>
                        </div>
                        <div>
                          <p className="text-xs text-gray-500 mb-1">Data Quality</p>
                          <p className="text-2xl font-bold text-gray-900">{assessment.data_quality_score}%</p>
                        </div>
                        <div>
                          <p className="text-xs text-gray-500 mb-1">Total Violations</p>
                          <p className="text-2xl font-bold text-yellow-600">{assessment.total_violations}</p>
                        </div>
                        <div>
                          <p className="text-xs text-gray-500 mb-1">Critical Issues</p>
                          <p className="text-2xl font-bold text-red-600">{assessment.critical_violations}</p>
                        </div>
                      </div>

                      <button className="text-green-600 hover:text-green-700 font-medium text-sm">
                        View Details →
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>

            {/* Detailed Assessment View */}
            {selectedAssessment && (
              <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
                <div className="bg-white rounded-xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
                  <div className="sticky top-0 bg-white border-b border-gray-200 p-6 flex items-center justify-between">
                    <h2 className="text-2xl font-bold text-gray-900">Assessment Details</h2>
                    <button
                      onClick={() => setSelectedAssessment(null)}
                      className="text-gray-400 hover:text-gray-600"
                    >
                      ✕
                    </button>
                  </div>

                  <div className="p-6 space-y-6">
                    {/* Violations */}
                    <div>
                      <h3 className="text-lg font-semibold text-gray-900 mb-4">Violations & Issues</h3>
                      <div className="space-y-3">
                        {selectedAssessment.assessment_data.violations.map((violation, idx) => (
                          <div key={idx} className="border border-gray-200 rounded-lg p-4">
                            <div className="flex items-start justify-between mb-3">
                              <div>
                                <h4 className="font-semibold text-gray-900">{violation.category.replace('_', ' ').toUpperCase()}</h4>
                                <p className="text-sm text-gray-600 mt-1">{violation.standard}</p>
                              </div>
                              <span className={`px-3 py-1 rounded-full text-xs font-medium ${getSeverityColor(violation.severity)}`}>
                                {violation.severity.toUpperCase()}
                              </span>
                            </div>
                            <p className="text-gray-700 mb-3">{violation.gap_description}</p>
                            <div className="grid grid-cols-2 gap-4 mb-3 text-sm">
                              <div>
                                <span className="text-gray-500">Actual: </span>
                                <span className="font-medium">{violation.actual_value}</span>
                              </div>
                              <div>
                                <span className="text-gray-500">Threshold: </span>
                                <span className="font-medium">{violation.threshold_value}</span>
                              </div>
                              <div>
                                <span className="text-gray-500">Deviation: </span>
                                <span className="font-medium text-red-600">{violation.deviation_percentage}%</span>
                              </div>
                              <div>
                                <span className="text-gray-500">Timeline: </span>
                                <span className="font-medium">{violation.timeline}</span>
                              </div>
                            </div>
                            <div className="bg-blue-50 p-3 rounded-lg">
                              <p className="text-sm font-medium text-blue-900 mb-1">Recommendation:</p>
                              <p className="text-sm text-blue-800">{violation.recommendation}</p>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>

                    {/* Strengths */}
                    {selectedAssessment.assessment_data.strengths.length > 0 && (
                      <div>
                        <h3 className="text-lg font-semibold text-gray-900 mb-3">Strengths</h3>
                        <div className="space-y-2">
                          {selectedAssessment.assessment_data.strengths.map((strength, idx) => (
                            <div key={idx} className="flex items-start space-x-2">
                              <CheckCircle className="w-5 h-5 text-green-600 flex-shrink-0 mt-0.5" />
                              <p className="text-gray-700">{strength}</p>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Next Steps */}
                    <div>
                      <h3 className="text-lg font-semibold text-gray-900 mb-3">Next Steps</h3>
                      <ol className="space-y-2">
                        {selectedAssessment.assessment_data.next_steps.map((step, idx) => (
                          <li key={idx} className="flex items-start space-x-3">
                            <span className="flex-shrink-0 w-6 h-6 bg-green-600 text-white rounded-full flex items-center justify-center text-sm font-medium">
                              {idx + 1}
                            </span>
                            <p className="text-gray-700 pt-0.5">{step}</p>
                          </li>
                        ))}
                      </ol>
                    </div>

                    {/* Missing Metrics */}
                    {selectedAssessment.assessment_data.missing_metrics.length > 0 && (
                      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                        <h3 className="text-lg font-semibold text-yellow-900 mb-2 flex items-center">
                          <AlertCircle className="w-5 h-5 mr-2" />
                          Missing Metrics
                        </h3>
                        <p className="text-sm text-yellow-800 mb-2">
                          The following metrics were not found in your data:
                        </p>
                        <div className="flex flex-wrap gap-2">
                          {selectedAssessment.assessment_data.missing_metrics.map((metric, idx) => (
                            <span key={idx} className="px-3 py-1 bg-yellow-200 text-yellow-800 rounded-full text-sm">
                              {metric.replace('_', ' ')}
                            </span>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}
          </div>
        )}
      </main>
    </div>
  );
};

export default EcoPilotDashboard;